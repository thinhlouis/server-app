const jwt = require("jsonwebtoken");

const authenticateRole = (req, res, next) => {
  const token = req.headers["x-access-token"] || req.headers["authorization"];

  if (!token) {
    return res.status(401).json({
      // N√™n d√πng 401 thay v√¨ 400 cho l·ªói x√°c th·ª±c
      success: false,
      message: "Token is not provided",
    });
  }

  try {
    // Lo·∫°i b·ªè 'Bearer ' n·∫øu c√≥
    const tokenWithoutBearer = token.replace(/^Bearer\s+/i, "");

    const decoded = jwt.verify(tokenWithoutBearer, process.env.SECRET_KEY);
    req.users = decoded; // N√™n d√πng 'user' thay v√¨ 'users' ƒë·ªÉ nh·∫•t qu√°n

    if (decoded.role !== "super_root") {
      return res.status(403).json({
        success: false,
        message: "üö´ Unauthorized!",
      });
    }

    next();
  } catch (error) {
    if (error instanceof jwt.TokenExpiredError) {
      return res.status(401).json({
        // 401 thay v√¨ 403 cho token h·∫øt h·∫°n
        success: false,
        message: "Token is expired",
      });
    }

    if (error instanceof jwt.JsonWebTokenError) {
      return res.status(401).json({
        success: false,
        message: "Invalid token", // Th·ªëng nh·∫•t ng√¥n ng·ªØ (ti·∫øng Anh)
      });
    }

    return res.status(500).json({
      success: false,
      message: "Authentication error", // Ch·ªØ th∆∞·ªùng cho th√¥ng b√°o l·ªói
    });
  }
};

module.exports = authenticateRole;
